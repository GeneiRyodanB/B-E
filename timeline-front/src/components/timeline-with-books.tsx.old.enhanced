"use client"


import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Search, Globe, Clock, User, BookOpen, X, BookText, FileText } from 'lucide-react';

// Type definitions
interface HistoricalEvent {
  year: string;
  event: string;
  figure: string;
  details: string;
  period?: string;
  country?: string;
  hasResources?: boolean;
}

interface Resource {
  title: string;
  author?: string;
  year: string;
  type?: string;
  description?: string;
  topics?: string[];
}

interface ResourcesByType {
  [key: string]: Resource[];
}

interface HistoricalResources {
  [key: string]: ResourcesByType;
}

interface HistoricalDataByCountry {
  [country: string]: HistoricalEvent[];
}

interface HistoricalDataByPeriod {
  [period: string]: HistoricalDataByCountry;
}

const TimelineDiagram = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCountry, setSelectedCountry] = useState('All');
  const [selectedPeriod, setSelectedPeriod] = useState('All');
  const [selectedResources, setSelectedResources] = useState<string | null>(null);

  const historicalData: HistoricalDataByPeriod = {
    'Ancient Period': {
      Egypt: [
        { year: '3150 BCE', event: 'Unification of Upper and Lower Egypt', figure: 'King Narmer', details: 'First dynasty of Egypt established' },
        { year: '2686 BCE', event: 'Old Kingdom Begins', figure: 'Pharaoh Djoser', details: 'Period of pyramid building' },
        { year: '1332 BCE', event: 'Tutankhamun Becomes Pharaoh', figure: 'Tutankhamun', details: 'The boy king ascends to the throne at age 9' }
      ],
      Rome: [
        { year: '44 BCE', event: 'Assassination of Caesar', figure: 'Julius Caesar', details: 'End of the Roman Republic' },
        { year: '80 CE', event: 'Colosseum Completed', figure: 'Emperor Titus', details: 'Inauguration of the Flavian Amphitheatre' }
      ]
    },
    'Medieval Period': {
      Europe: [
        { year: '800', event: 'Charlemagne Crowned', figure: 'Charlemagne', details: 'Holy Roman Empire established' },
        { year: '1066', event: 'Battle of Hastings', figure: 'William the Conqueror', details: 'Norman Conquest of England' }
      ]
    },
    'Modern Era': {
      USA: [
        { year: '1776', event: 'Declaration of Independence', figure: 'Thomas Jefferson', details: 'American independence declared' },
        { year: '1969', event: 'Moon Landing', figure: 'Neil Armstrong', details: 'First humans on the moon' }
      ]
    }
  };

  const historicalResources: HistoricalResources = {
    'King Narmer': {
      books: [
        {
          title: "The Rise of Egypt's First Dynasty",
          author: "Toby Wilkinson",
          year: "2000",
          type: "Academic Study",
          description: "Detailed analysis of the unification of Egypt and the role of King Narmer.",
          topics: ["Unification of Egypt", "Early Dynastic Period", "Ancient Egyptian State Formation"]
        }
      ],
      articles: [
        {
          title: "The Narmer Palette: An Ancient Egyptian Monument",
          author: "David O'Connor",
          year: "2018",
          description: "Analysis of the iconic artifact depicting King Narmer's unification of Egypt"
        }
      ]
    },
    'Neil Armstrong': {
      books: [
        {
          title: "First Man: The Life of Neil A. Armstrong",
          author: "James R. Hansen",
          year: "2005",
          type: "Biography",
          description: "Authorized biography with unprecedented access to private documents.",
          topics: ["Space Exploration", "NASA", "Apollo Program"]
        }
      ],
      documents: [
        {
          title: "Apollo 11 Mission Report",
          year: "1969",
          type: "Technical Document",
          description: "Complete scientific and engineering analysis of the mission"
        }
      ]
    }
  };

  const getYearValue = (yearStr: string): number => {
    const year = yearStr.replace(/[^0-9-]/g, '');
    return yearStr.includes('BCE') ? -parseInt(year) : parseInt(year);
  };

  const filteredData = React.useMemo(() => {
    let events: HistoricalEvent[] = [];
    Object.entries(historicalData).forEach(([period, periodData]) => {
      if (selectedPeriod === 'All' || selectedPeriod === period) {
        Object.entries(periodData).forEach(([country, countryEvents]) => {
          if (selectedCountry === 'All' || selectedCountry === country) {
            countryEvents.forEach(event => {
              if (searchQuery === '' || 
                  event.event.toLowerCase().includes(searchQuery.toLowerCase()) ||
                  event.figure.toLowerCase().includes(searchQuery.toLowerCase())) {
                events.push({
                  ...event,
                  period,
                  country,
                  hasResources: historicalResources.hasOwnProperty(event.figure)
                });
              }
            });
          }
        });
      }
    });
    return events.sort((a, b) => getYearValue(a.year) - getYearValue(b.year));
  }, [searchQuery, selectedPeriod, selectedCountry]);

  const periods = ['All', ...Object.keys(historicalData)];
  const countries = ['All', ...new Set(Object.values(historicalData).flatMap(periodData => Object.keys(periodData)))];

  const ResourcesModal = ({ figure }: { figure: string }) => {
    const resources = historicalResources[figure];
    if (!resources) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <Card className="max-w-3xl w-full max-h-[80vh] overflow-y-auto">
          <div className="p-6 space-y-6">
            <div className="flex justify-between items-start">
              <h2 className="text-2xl font-bold text-blue-600">Resources about {figure}</h2>
              <button onClick={() => setSelectedResources(null)} className="p-1 hover:bg-gray-100 rounded-full">
                <X className="w-6 h-6" />
              </button>
            </div>
            <div className="space-y-8">
              {Object.entries(resources).map(([resourceType, items]) => (
                <div key={resourceType} className="space-y-4">
                  <h3 className="text-xl font-semibold capitalize">{resourceType}</h3>
                  <div className="space-y-4">
                    {items.map((item, index) => (
                      <Card key={index} className="p-4">
                        <div className="space-y-3">
                          <div className="flex justify-between items-start">
                            <div className="flex items-center gap-2">
                              {resourceType === 'books' ? <BookText className="w-4 h-4" /> : <FileText className="w-4 h-4" />}
                              <h4 className="text-lg font-bold text-blue-700">{item.title}</h4>
                            </div>
                            <span className="text-sm bg-blue-100 px-2 py-1 rounded">{item.year}</span>
                          </div>
                          {item.author && <div className="text-sm text-gray-600">by {item.author}</div>}
                          {item.description && <p className="text-gray-600">{item.description}</p>}
                          {item.topics && (
                            <div className="flex flex-wrap gap-2">
                              {item.topics.map((topic, i) => (
                                <span key={i} className="text-sm bg-purple-100 px-2 py-1 rounded">{topic}</span>
                              ))}
                            </div>
                          )}
                        </div>
                      </Card>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Card>
      </div>
    );
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="mb-8 space-y-6">
        <h1 className="text-3xl font-bold text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          World History Timeline
        </h1>
        
        <div className="flex flex-col space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search events, figures, or details..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
            />
          </div>
          
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Clock className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
              <select
                value={selectedPeriod}
                onChange={(e) => setSelectedPeriod(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border rounded-lg appearance-none cursor-pointer focus:ring-2 focus:ring-blue-500 outline-none"
              >
                {periods.map(period => (
                  <option key={period} value={period}>{period}</option>
                ))}
              </select>
            </div>
            
            <div className="relative flex-1">
              <Globe className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
              <select
                value={selectedCountry}
                onChange={(e) => setSelectedCountry(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border rounded-lg appearance-none cursor-pointer focus:ring-2 focus:ring-blue-500 outline-none"
              >
                {countries.map(country => (
                  <option key={country} value={country}>{country}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>

      <div className="relative">
        <div className="absolute left-24 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-500 to-purple-500" />
        <div className="space-y-8">
          {filteredData.map((event, index) => (
            <div key={index} className="relative flex items-center ml-24">
              <div className="absolute -left-4 w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg">
                •
              </div>
              <Card className="ml-8 p-4 w-full hover:shadow-lg transition-shadow">
                <div className="space-y-2">
                  <div className="flex justify-between items-start">
                    <span className="text-lg font-bold text-blue-600">{event.year}</span>
                    <div className="flex gap-2">
                      <span className="text-sm bg-blue-100 px-2 py-1 rounded">{event.country}</span>
                      <span className="text-sm bg-purple-100 px-2 py-1 rounded">{event.period}</span>
                    </div>
                  </div>
                  <h3 className="text-xl font-bold">{event.event}</h3>
                  <div className="flex items-center gap-2">
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <User className="w-4 h-4" />
                      <span>{event.figure}</span>
                    </div>
                    {event.hasResources && (
                      <button
                        onClick={() => setSelectedResources(event.figure)}
                        className="flex items-center gap-1 text-sm text-blue-500 hover:text-blue-600"
                      >
                        <BookOpen className="w-4 h-4" />
                        <span>View Resources</span>
                      </button>
                    )}
                  </div>
                  <p className="text-gray-600 text-sm">{event.details}</p>
                </div>
              </Card>
            </div>
          ))}
        </div>
      </div>
      
      {selectedResources && <ResourcesModal figure={selectedResources} />}
    </div>
  );
};

export default TimelineDiagram;