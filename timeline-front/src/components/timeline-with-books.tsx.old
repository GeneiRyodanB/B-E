"use client"

import React, { useState } from 'react';
import { Card } from '@/components/ui/card';
import { Search, Globe, Clock, User, BookOpen, X, BookText } from 'lucide-react';

const TimelineDiagramOld = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCountry, setSelectedCountry] = useState('All');
  const [selectedPeriod, setSelectedPeriod] = useState('All');
  const [selectedBooks, setSelectedBooks] = useState(null);

  // Historical events data
  const historicalData = {
    'Ancient Period': {
      Egypt: [
        { 
          year: '3150 BCE', 
          event: 'Unification of Upper and Lower Egypt', 
          figure: 'King Narmer', 
          details: 'First dynasty of Egypt established' 
        },
        { 
          year: '2686 BCE', 
          event: 'Old Kingdom Begins', 
          figure: 'Pharaoh Djoser', 
          details: 'Period of pyramid building' 
        }
      ],
      Rome: [
        { 
          year: '44 BCE', 
          event: 'Assassination of Caesar', 
          figure: 'Julius Caesar', 
          details: 'End of the Roman Republic' 
        }
      ]
    },
    'Medieval Period': {
      Europe: [
        { 
          year: '800', 
          event: 'Charlemagne Crowned', 
          figure: 'Charlemagne', 
          details: 'Holy Roman Empire established' 
        }
      ]
    }
  };

  // Historical books data
  const historicalBooks = {
    'King Narmer': [
      {
        title: "The Rise of Egypt's First Dynasty",
        author: "Toby Wilkinson",
        year: "2000",
        type: "Academic Study",
        description: "Detailed analysis of the unification of Egypt and the role of King Narmer in establishing the First Dynasty.",
        perspective: "Archaeological and Historical",
        topics: ["Unification of Egypt", "Early Dynastic Period", "Ancient Egyptian State Formation"]
      }
    ],
    'Julius Caesar': [
      {
        title: "The Twelve Caesars",
        author: "Suetonius",
        year: "121 CE",
        type: "Ancient Biography",
        description: "Contemporary biographical account of Julius Caesar and other Roman emperors.",
        perspective: "Roman Historical",
        topics: ["Rise to Power", "Military Campaigns", "Political Reform"]
      },
      {
        title: "Commentarii de Bello Gallico",
        author: "Julius Caesar",
        year: "50-40 BCE",
        type: "Autobiography",
        description: "Caesar's firsthand account of the Gallic Wars.",
        perspective: "Personal Account",
        topics: ["Gallic Wars", "Military Strategy", "Roman Expansion"]
      }
    ],
    'Charlemagne': [
      {
        title: "Life of Charlemagne",
        author: "Einhard",
        year: "830 CE",
        type: "Contemporary Biography",
        description: "Written by a member of Charlemagne's court, providing firsthand accounts of his life and reign.",
        perspective: "Courtier's Account",
        topics: ["Personal Life", "Administration", "Military Campaigns"]
      }
    ]
  };

  // Helper function for year sorting
  const getYearValue = (yearStr) => {
    const year = yearStr.replace(/[^0-9-]/g, '');
    return yearStr.includes('BCE') ? -parseInt(year) : parseInt(year);
  };

  // Get filtered and sorted data
  const filteredData = React.useMemo(() => {
    let events = [];

    Object.entries(historicalData).forEach(([period, periodData]) => {
      if (selectedPeriod === 'All' || selectedPeriod === period) {
        Object.entries(periodData).forEach(([country, countryEvents]) => {
          if (selectedCountry === 'All' || selectedCountry === country) {
            countryEvents.forEach(event => {
              if (
                searchQuery === '' ||
                event.event.toLowerCase().includes(searchQuery.toLowerCase()) ||
                event.figure.toLowerCase().includes(searchQuery.toLowerCase()) ||
                event.details.toLowerCase().includes(searchQuery.toLowerCase())
              ) {
                events.push({
                  ...event,
                  period,
                  country,
                  hasBooks: historicalBooks.hasOwnProperty(event.figure)
                });
              }
            });
          }
        });
      }
    });

    return events.sort((a, b) => getYearValue(a.year) - getYearValue(b.year));
  }, [historicalData, selectedPeriod, selectedCountry, searchQuery]);

  // Get unique periods and countries for filters
  const periods = ['All', ...Object.keys(historicalData)];
  const countries = ['All', ...new Set(
    Object.values(historicalData).flatMap(periodData => Object.keys(periodData))
  )];

  // Book display modal component
  const BooksModal = ({ figure }) => {
    const books = historicalBooks[figure];
    if (!books) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <Card className="max-w-3xl w-full max-h-[80vh] overflow-y-auto">
          <div className="p-6 space-y-6">
            <div className="flex justify-between items-start">
              <h2 className="text-2xl font-bold text-blue-600">
                Historical Books About {figure}
              </h2>
              <button 
                onClick={() => setSelectedBooks(null)}
                className="p-1 hover:bg-gray-100 rounded-full"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-6">
              {books.map((book, index) => (
                <Card key={index} className="p-4 hover:shadow-lg transition-shadow">
                  <div className="space-y-3">
                    <div className="flex justify-between items-start">
                      <h3 className="text-xl font-bold text-blue-700">{book.title}</h3>
                      <span className="text-sm bg-blue-100 px-2 py-1 rounded">
                        {book.year}
                      </span>
                    </div>
                    
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <BookText className="w-4 h-4" />
                      <span className="font-medium">{book.author}</span>
                      <span className="text-gray-400">â€¢</span>
                      <span>{book.type}</span>
                    </div>

                    <p className="text-gray-600">{book.description}</p>

                    <div className="space-y-2">
                      <div className="text-sm">
                        <span className="font-semibold">Historical Perspective: </span>
                        <span className="text-gray-600">{book.perspective}</span>
                      </div>

                      <div className="flex flex-wrap gap-2">
                        {book.topics.map((topic, i) => (
                          <span key={i} className="text-sm bg-purple-100 px-2 py-1 rounded">
                            {topic}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>
        </Card>
      </div>
    );
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      {/* Search and Filters */}
      <div className="mb-8 space-y-6">
        <h1 className="text-3xl font-bold text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          World History Timeline
        </h1>
        
        <div className="flex flex-col space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search events, figures, or details..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 outline-none"
            />
          </div>
          
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Clock className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
              <select
                value={selectedPeriod}
                onChange={(e) => setSelectedPeriod(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border rounded-lg appearance-none cursor-pointer focus:ring-2 focus:ring-blue-500 outline-none"
              >
                {periods.map(period => (
                  <option key={period} value={period}>{period}</option>
                ))}
              </select>
            </div>
            
            <div className="relative flex-1">
              <Globe className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
              <select
                value={selectedCountry}
                onChange={(e) => setSelectedCountry(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border rounded-lg appearance-none cursor-pointer focus:ring-2 focus:ring-blue-500 outline-none"
              >
                {countries.map(country => (
                  <option key={country} value={country}>{country}</option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* Timeline */}
      <div className="relative">
        <div className="absolute left-24 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-500 to-purple-500" />
        
        <div className="space-y-8">
          {filteredData.map((event, index) => (
            <div key={index} className="relative flex items-center ml-24">
              <div className="absolute -left-4 w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white text-sm font-bold shadow-lg">
                â€¢
              </div>
              
              <Card className="ml-8 p-4 w-full hover:shadow-lg transition-shadow">
                <div className="space-y-2">
                  <div className="flex justify-between items-start">
                    <span className="text-lg font-bold text-blue-600">{event.year}</span>
                    <div className="flex gap-2">
                      <span className="text-sm bg-blue-100 px-2 py-1 rounded">
                        {event.country}
                      </span>
                      <span className="text-sm bg-purple-100 px-2 py-1 rounded">
                        {event.period}
                      </span>
                    </div>
                  </div>
                  
                  <h3 className="text-xl font-bold">{event.event}</h3>
                  
                  <div className="flex items-center gap-2">
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <User className="w-4 h-4" />
                      <span>{event.figure}</span>
                    </div>
                    {event.hasBooks && (
                      <button
                        onClick={() => setSelectedBooks(event.figure)}
                        className="flex items-center gap-1 text-sm text-blue-500 hover:text-blue-600"
                      >
                        <BookOpen className="w-4 h-4" />
                        <span>View Historical Books</span>
                      </button>
                    )}
                  </div>
                  
                  <p className="text-gray-600 text-sm">{event.details}</p>
                </div>
              </Card>
            </div>
          ))}
        </div>
      </div>

      {selectedBooks && <BooksModal figure={selectedBooks} />}
    </div>
  );
};

export default TimelineDiagramOld;
